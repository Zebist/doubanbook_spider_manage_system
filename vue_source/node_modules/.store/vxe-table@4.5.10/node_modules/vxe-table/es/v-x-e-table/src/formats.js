import XEUtils from 'xe-utils';
import { warnLog } from '../../tools/log';
var VXEFormatsStore = /** @class */ (function () {
    function VXEFormatsStore() {
        this.store = {};
    }
    VXEFormatsStore.prototype.mixin = function (options) {
        var _this = this;
        XEUtils.each(options, function (item, key) {
            _this.add(key, item);
        });
        return this;
    };
    VXEFormatsStore.prototype.has = function (name) {
        return !!this.get(name);
    };
    VXEFormatsStore.prototype.get = function (name) {
        return this.store[name];
    };
    VXEFormatsStore.prototype.add = function (name, render) {
        var conf = this.store[name];
        // 兼容
        if (XEUtils.isFunction(render)) {
            if (process.env.NODE_ENV === 'development') {
                warnLog('vxe.error.delProp', ['formats -> callback', 'cellFormatMethod']);
            }
            render = {
                cellFormatMethod: render
            };
        }
        // 检测是否覆盖
        if (process.env.NODE_ENV === 'development') {
            var confKeys_1 = XEUtils.keys(conf);
            XEUtils.each(render, function (item, key) {
                if (confKeys_1.includes(key)) {
                    warnLog('vxe.error.coverProp', [name, key]);
                }
            });
        }
        this.store[name] = conf ? XEUtils.merge(conf, render) : render;
        return this;
    };
    VXEFormatsStore.prototype.delete = function (name) {
        delete this.store[name];
    };
    VXEFormatsStore.prototype.forEach = function (callback) {
        XEUtils.objectEach(this.store, callback);
    };
    return VXEFormatsStore;
}());
export var formats = new VXEFormatsStore();
if (process.env.NODE_ENV === 'development') {
    Object.assign(formats, { _name: 'Formats' });
}
